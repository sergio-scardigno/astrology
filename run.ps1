# Script para ejecutar la aplicaci√≥n de astrolog√≠a con Docker en Windows
# Incluye configuraci√≥n para HTTPS

param(
    [switch]$Build,
    [switch]$Stop,
    [switch]$Logs
)

# Colores para output
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"
$White = "White"

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = $White
    )
    Write-Host $Message -ForegroundColor $Color
}

Write-ColorOutput "=== Aplicaci√≥n de Astrolog√≠a con HTTPS ===" $Blue

# Verificar si Docker est√° instalado
try {
    docker --version | Out-Null
} catch {
    Write-ColorOutput "Error: Docker no est√° instalado. Por favor, instala Docker Desktop primero." $Red
    exit 1
}

# Funci√≥n para detener contenedor
if ($Stop) {
    Write-ColorOutput "Deteniendo contenedor..." $Yellow
    docker stop astrology-app 2>$null
    docker rm astrology-app 2>$null
    Write-ColorOutput "Contenedor detenido." $Green
    exit 0
}

# Funci√≥n para mostrar logs
if ($Logs) {
    Write-ColorOutput "Mostrando logs del contenedor..." $Blue
    docker logs -f astrology-app
    exit 0
}

# Verificar si la imagen existe, si no, construirla
$imageExists = docker images -q astrology-app 2>$null
if (-not $imageExists -or $Build) {
    Write-ColorOutput "Construyendo imagen Docker..." $Yellow
    docker build -t astrology-app .
    if ($LASTEXITCODE -ne 0) {
        Write-ColorOutput "Error al construir la imagen Docker." $Red
        exit 1
    }
}

# Detener contenedor existente si est√° corriendo
$containerRunning = docker ps -q -f name=astrology-app 2>$null
if ($containerRunning) {
    Write-ColorOutput "Deteniendo contenedor existente..." $Yellow
    docker stop astrology-app
    docker rm astrology-app
}

# Ejecutar el contenedor
Write-ColorOutput "Iniciando aplicaci√≥n..." $Green
docker run -d `
    --name astrology-app `
    --restart unless-stopped `
    -p 80:80 `
    -p 443:443 `
    -v "${PWD}\ephe:/opt/swisseph/ephe:ro" `
    astrology-app

if ($LASTEXITCODE -ne 0) {
    Write-ColorOutput "Error al iniciar el contenedor." $Red
    exit 1
}

# Esperar a que la aplicaci√≥n est√© lista
Write-ColorOutput "Esperando a que la aplicaci√≥n est√© lista..." $Yellow
Start-Sleep -Seconds 10

# Verificar que la aplicaci√≥n est√© funcionando
try {
    $response = Invoke-WebRequest -Uri "https://localhost/health" -SkipCertificateCheck -UseBasicParsing -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-ColorOutput "‚úÖ Aplicaci√≥n iniciada correctamente!" $Green
        Write-ColorOutput "üì± URLs de acceso:" $Blue
        Write-ColorOutput "   üåê HTTP:  http://localhost" $White
        Write-ColorOutput "   üîí HTTPS: https://localhost" $White
        Write-ColorOutput "   üìä Health: https://localhost/health" $White
        Write-ColorOutput "   üìã Status: https://localhost/status" $White
        Write-ColorOutput "" $White
        Write-ColorOutput "‚ö†Ô∏è  Nota: El certificado SSL es auto-firmado." $Yellow
        Write-ColorOutput "   Tu navegador mostrar√° una advertencia de seguridad." $White
        Write-ColorOutput "   Puedes hacer clic en 'Avanzado' y 'Continuar' para acceder." $White
        Write-ColorOutput "" $White
        Write-ColorOutput "Para detener la aplicaci√≥n:" $Blue
        Write-ColorOutput "   docker stop astrology-app" $White
        Write-ColorOutput "   o ejecutar: .\run.ps1 -Stop" $White
        Write-ColorOutput "" $White
        Write-ColorOutput "Para ver los logs:" $Blue
        Write-ColorOutput "   docker logs -f astrology-app" $White
        Write-ColorOutput "   o ejecutar: .\run.ps1 -Logs" $White
    } else {
        throw "Status code: $($response.StatusCode)"
    }
} catch {
    Write-ColorOutput "‚ùå Error: La aplicaci√≥n no se inici√≥ correctamente." $Red
    Write-ColorOutput "Revisando logs..." $Yellow
    docker logs astrology-app
    exit 1
} 